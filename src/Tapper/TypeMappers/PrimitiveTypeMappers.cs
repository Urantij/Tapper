// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Tapper
// </auto-generated>
#nullable enable
using System;
using Microsoft.CodeAnalysis;

namespace Tapper.TypeMappers;

public class BooleanTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public BooleanTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Boolean")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "boolean";
        }

        throw new InvalidOperationException($"BooleanTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class ByteTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public ByteTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Byte")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"ByteTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class SByteTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public SByteTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.SByte")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"SByteTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class CharTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public CharTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Char")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"CharTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class DecimalTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public DecimalTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Decimal")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"DecimalTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class DoubleTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public DoubleTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Double")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"DoubleTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class SingleTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public SingleTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Single")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"SingleTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class Int32TypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public Int32TypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Int32")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"Int32TypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class UInt32TypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public UInt32TypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.UInt32")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"UInt32TypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class Int64TypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public Int64TypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Int64")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"Int64TypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class UInt64TypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public UInt64TypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.UInt64")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"UInt64TypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class Int16TypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public Int16TypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Int16")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"Int16TypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class UInt16TypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public UInt16TypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.UInt16")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "number";
        }

        throw new InvalidOperationException($"UInt16TypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class ObjectTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public ObjectTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Object")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "any";
        }

        throw new InvalidOperationException($"ObjectTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class StringTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public StringTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.String")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "string";
        }

        throw new InvalidOperationException($"StringTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class UriTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public UriTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Uri")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "string";
        }

        throw new InvalidOperationException($"UriTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}

public class GuidTypeMapper : ITypeMapper
{
    public ITypeSymbol Assign { get; }

    public GuidTypeMapper(Compilation compilation)
    {
        Assign = compilation.GetTypeByMetadataName("System.Guid")!;
    }

    public string MapTo(ITypeSymbol typeSymbol, ITranspilationOptions options)
    {
        if (SymbolEqualityComparer.Default.Equals(typeSymbol, Assign))
        {
            return "string";
        }

        throw new InvalidOperationException($"GuidTypeMapper is not support {typeSymbol.ToDisplayString()}.");
    }
}


public static class PrimitiveTypeMappers
{
    public static ITypeMapper[] Create(Compilation compilation)
    {
        var mappers = new ITypeMapper[17];

        mappers[0] = new BooleanTypeMapper(compilation);
        mappers[1] = new ByteTypeMapper(compilation);
        mappers[2] = new SByteTypeMapper(compilation);
        mappers[3] = new CharTypeMapper(compilation);
        mappers[4] = new DecimalTypeMapper(compilation);
        mappers[5] = new DoubleTypeMapper(compilation);
        mappers[6] = new SingleTypeMapper(compilation);
        mappers[7] = new Int32TypeMapper(compilation);
        mappers[8] = new UInt32TypeMapper(compilation);
        mappers[9] = new Int64TypeMapper(compilation);
        mappers[10] = new UInt64TypeMapper(compilation);
        mappers[11] = new Int16TypeMapper(compilation);
        mappers[12] = new UInt16TypeMapper(compilation);
        mappers[13] = new ObjectTypeMapper(compilation);
        mappers[14] = new StringTypeMapper(compilation);
        mappers[15] = new UriTypeMapper(compilation);
        mappers[16] = new GuidTypeMapper(compilation);

        return mappers;
    }
}
